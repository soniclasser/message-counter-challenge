services:
  db:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3-management-alpine
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    ports:
      - "5672:5672" 
      - "15672:15672"

  migrator:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    command: sh -c "npx sequelize-cli db:migrate --config ./config/config.js"
    env_file: ./.env 
    environment:
      NODE_ENV: production
    depends_on:
      db:
        condition: service_healthy 

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    command: sh -c "npx ts-node src/api.ts"
    env_file: ./.env
    ports:
      - "3000:3000"
    depends_on:
      - db
      - rabbitmq
      - migrator

  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    command: sh -c "npx ts-node src/workers.ts"
    env_file: ./.env
    depends_on:
      - db
      - rabbitmq
      - migrator

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    depends_on:
      - api

volumes:
  postgres_data: